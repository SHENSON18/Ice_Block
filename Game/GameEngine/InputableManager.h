#pragma once
#include <map>
#include "Azul.h"
#include "KeyState.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Manages the Inputables and the KeyStates</summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class InputableManager
{
private:

	/// <summary>	The active keys and their keystate </summary>
	static std::map<AZUL_KEY, KeyState > ActiveKeys;

	/// <summary>	The iterator. </summary>
	std::map<AZUL_KEY, KeyState>::iterator iter;

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	InputableManager();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual ~InputableManager();

// *********FUNCTIONS************************** 

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Registers this object. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	///
	/// <param name="object">	[in,out] If non-null, the object. </param>
	/// <param name="state"> 	The state. </param>
	/// <param name="K">	 	The AZUL_KEY to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Register(Inputable* object, KeyboardEnum::KeyState state, AZUL_KEY K);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	De register. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	///
	/// <param name="object">	[in,out] If non-null, the object. </param>
	/// <param name="state"> 	The state. </param>
	/// <param name="K">	 	The AZUL_KEY to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void DeRegister(Inputable* object, KeyboardEnum::KeyState state, AZUL_KEY K);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Updates all. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void UpdateAll();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Cleanups this object. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void Cleanup();

};

