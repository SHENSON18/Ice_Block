////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	GameEngine\AlarmMarker.cpp
//
// summary:	Implements the alarm marker class
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "AlarmMarker.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Constructor. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
///
/// <param name="ptr"> 	[in,out] If non-null, the pointer. </param>
/// <param name="id">  	The Alarm ID ENUM. </param>
/// <param name="time">	The time you want the alarm to trigger. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

AlarmMarker::AlarmMarker(Alarmable* ptr,Alarmable::AlarmID id , float time)
{
	ptrAlarmable = ptr;                 
	ptrAlarmable->TriggerTime = time;   //sets the trigger time of the alarmable with time.  Should we be doing this?
	alarmID = id;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Destructor. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

AlarmMarker::~AlarmMarker(void)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Executes the callaback operation. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
///
/// <param name="n">	The Alarmable::AlarmID to process. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void AlarmMarker::ExecuteCallaback(Alarmable::AlarmID n)  //call pointers alarm
{
	ptrAlarmable->Dispatch(n);

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets the alarmmable. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
///
/// <returns>	null if it fails, else the alarmmable. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

Alarmable* AlarmMarker::GetAlarmmable()   //I think this is used to pass the pointer to the manager...
{
	return  ptrAlarmable;

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets alarm identifier. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
///
/// <returns>	The alarm identifier. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

Alarmable::AlarmID AlarmMarker::GetAlarmID()
{
	return alarmID;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets the current time. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
///
/// <returns>	The time. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

float AlarmMarker::GetTime()
{
	return	ptrAlarmable->TriggerTime; //gets the total time
} 