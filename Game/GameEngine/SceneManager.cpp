////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	GameEngine\SceneManager.cpp
//
// summary:	Implements the scene manager class
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "SceneManager.h"


SceneManager* SceneManager::gameInstance = nullptr;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Default constructor. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

SceneManager::SceneManager()
{
	ptrNextScene = NULL;
	currentscene = NULL;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Destructor. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

SceneManager::~SceneManager()
{
	gameInstance = NULL;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Insantiates this object. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

void SceneManager::Insantiate()
{
	Instance();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Draw current scene. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

void SceneManager::DrawCurrentScene()
{
	Instance().currentscene->DrawScene();
	//printf("%c SceneManager is drawing\n");

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Updates the current scene. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

void SceneManager::UpdateCurrentScene()
{
	if ( Instance().currentscene != Instance().ptrNextScene )
	{
		Instance().currentscene->SceneEnd();
		DeleteCurrentScene();
		SetCurrentScene(gameInstance->ptrNextScene);
		//Instance().currentscene->Setup();  //this will probably kill me...
	}
	Instance().currentscene->AlarmMan.UpdateAlarms();
	Instance().currentscene->CollisionMan.ProcessCollisions();
	Instance().currentscene->UpdateScene();
	//printf("%c SceneManager is done update\n");
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Sets current scene. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
///
/// <param name="s">	[in,out] If non-null, the Scene* to process. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void SceneManager::SetCurrentScene(Scene* s)
{

	Instance().PrivateSetCurrentScene(s);
	gameInstance->currentscene->Setup();
	gameInstance->ptrNextScene = gameInstance->currentscene;

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Deletes the current scene. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

void SceneManager::DeleteCurrentScene()
{
	Instance().currentscene->CollisionMan.Cleanup();
	delete Instance().getCurrentScene();
	//delete gameInstance;
	gameInstance->currentscene = NULL;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Private set current scene. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
///
/// <param name="s">	[in,out] If non-null, the Scene* to process. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void SceneManager::PrivateSetCurrentScene(Scene* s)
{
	Instance().currentscene = s;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Next scene. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
///
/// <param name="s">	[in,out] If non-null, the Scene* to process. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void SceneManager::NextScene(Scene* s)
{
	Instance().ptrNextScene = s;
}

//**************WRAPPERS***********************
