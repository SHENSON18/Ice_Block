#pragma once
#include "KeyboardEnum.h"
#include "Azul.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Inputable is a inherited State that GameObject has.
/// 			This state works with the InputManager to observe all Registered Object Keys . </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class Inputable
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	Inputable(){};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual ~Inputable(){};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Key pressed. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	///
	/// <param name="K">	The AZUL_KEY to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void KeyPressed(AZUL_KEY K) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Key released. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	///
	/// <param name="K">	The AZUL_KEY to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void KeyReleased(AZUL_KEY K) = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Registers the key. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	///
	/// <param name="K">		The AZUL_KEY to process. </param>
	/// <param name="state">	The state you wish to Register to. Ex. KeyPressed/KeyReleased </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void RegisterKey(AZUL_KEY K, KeyboardEnum::KeyState state);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	DeRegister key. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	///
	/// <param name="gameobject">	[in,out] If non-null, the gameobject. </param>
	/// <param name="K">		 	The AZUL_KEY to process. </param>
	/// <param name="state">	 	The state you wish to DeRegister from. Ex. KeyPressed/KeyReleased </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void DeRegisterKey(Inputable* gameobject, AZUL_KEY K, KeyboardEnum::KeyState state);
};

