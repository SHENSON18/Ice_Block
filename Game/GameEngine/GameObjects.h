#pragma once
#include "Inputable.h"
#include "Draw.h"
#include "Updatable.h"
#include "Alarmable.h"
#include "Collidable.h"
#include "CollidableGroup.h"
#include "Terminable.h"
#include "Timeable.h"
#include "BoundingSphereVolume.h"
#include <iostream>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	GameObjects are the main objects you will be creating while using IceBlock.
/// 			For GameObjects inherit from all the main systems.  When using these objects be sure to Register
/// 			to the systems you wish to have track this object.   </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

class GameObjects : public Inputable, public Draw, public Updatable, public Alarmable , public Collidable , public Terminable, public Timeable
{

public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Default constructor. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GameObjects();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Destructor. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual ~GameObjects(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Initializes this object. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Initialize(){};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Registers to current scene. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	void RegisterToCurrentScene();

	// key and input here

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Updates this object. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Update();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Key pressed. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	///
	/// <param name="K">	The AZUL_KEY to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void KeyPressed(AZUL_KEY K);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Key released. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	///
	/// <param name="K">	The AZUL_KEY to process. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void KeyReleased(AZUL_KEY K);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Draw object. </summary>
	///
	/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void DrawObject() override;

	


};

