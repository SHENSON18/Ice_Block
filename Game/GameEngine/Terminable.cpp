////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	GameEngine\Terminable.cpp
//
// summary:	Implements the terminable class
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Terminable.h"
#include "SceneManager.h"

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Destructor. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

Terminable::~Terminable()
{
	_MarkedForTermination = false;
	//SceneManager::getCurrentScene()->GetDumpster()->Register(this);

}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Calls the ITems Termination Call. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

void Terminable::MarkForTermination()
{
	//wrapper for user to call 
	SceneManager::getCurrentScene()->GetTerminableManager()->Register(this);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Terminates this GameObject.  Now this is used to have all of the Terminations occur at the proper time
/// 			in the game loop.  Use this when you wish the GameObject to DeRegister from a Manager. </summary>
///
/// <remarks>	Theonlyhunter, 3/13/2015. </remarks>
////////////////////////////////////////////////////////////////////////////////////////////////////

void Terminable::Terminate()
{
	_MarkedForTermination = true;
}